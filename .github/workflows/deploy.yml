name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/backend
  TAG: ${{ github.sha }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: ${{ runner.os }}-gradle-

      - name: Build with Gradle
        run: ./gradlew clean bootJar -x test

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and tag Docker image
        run: |
          docker build . \
            --file Dockerfile \
            --tag $IMAGE_NAME:latest \
            --tag $IMAGE_NAME:$TAG

      - name: Push Docker image
        run: |
          docker push $IMAGE_NAME:latest
          docker push $IMAGE_NAME:$TAG

      - name: SSH & deploy
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ubuntu
          key:      ${{ secrets.DEPLOY_SSH_KEY }}
          script: |
            # 1) 고정 배포 디렉토리로 이동 (없으면 생성)
            mkdir -p /home/ubuntu/deploy
            cd       /home/ubuntu/deploy

            # 2) docker-compose.yml 파일이 없으면 생성
            if [ ! -f docker-compose.yml ]; then
              cat > docker-compose.yml << 'EOL'
            version: '3'
            services:
              app:
                image: ${{ secrets.DOCKERHUB_USERNAME }}/backend:latest
                container_name: backend-app
                restart: always
                ports:
                  - "8080:8080"
                environment:
                  - SPRING_PROFILES_ACTIVE=prod
                  - SPRING_DATASOURCE_URL=${{ secrets.DATASOURCE_URL }}
                  - SPRING_DATASOURCE_USERNAME=${{ secrets.DATASOURCE_USERNAME }}
                  - SPRING_DATASOURCE_PASSWORD=${{ secrets.DATASOURCE_PASSWORD }}
            EOL
            fi

            # 3) Docker Hub 로그인 (password-stdin)
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | sudo docker login --username "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

            # 4) 이미지 풀 & 업데이트
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/backend:latest
            sudo docker-compose pull
            sudo docker-compose rm -f app
            sudo docker-compose up -d --no-deps app
